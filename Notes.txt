1 - Data & Memory
	- in RAM the smallest unit of memory is a memory cell (SDRAM cell) composed of logic gates to represent
		and save the elec pulse into it.
	- 8 memory cells are composing a memory unit, (why 8?) -> nothing technical, IBM was the influencer in this.
	- each a memory unit has a value and an address.
	- memory is like a 8 col matric and each row is a 8bit memory cell, (mostlikely)
	- there're more than addressing modes.
	- there are more than one system (8-16-32-64)
	- the address of each memory cell is not stored anywhere, the address is recognized by
		a component in the memory called multiplexer. the multiplexer is been told to go to the memory store
		and read from itr or write into it and he is the one meant to recognize where exactly in memory.
		it is like a queue where u know the start and u know the index, viola.. now u know where is ur place in the queue
		so, the addrss is the index of the memorycell location in the memory matrix.

	- how to represent the data in the memory??
		- Numbers : from decimal to binary and hexa and vice versa.
		- Text : - ASCII (which has only english letters nad some special charachters)
				 - UTF Encoding (which is containing the ASCII inside it as UTF has all letters
					of all languages and all special chars)
		- Colors : RBG and HEXA
		- Pics : array of pixels and each picel has a color.

*********************************************************************************
2 - Memory & Data Type
	- u need to know the limit f each datatype
	- if a value takes more than byte in memory, the address of the value is the address 
		of the first byte it takes
	- a pointer is a datatype has its own address and its value is the address of the value of which it points to
	- in c# it should be in unsafe code
	- as we said the address of any value is not stored anywhere and it is detected and recognized by the multiplexer.
		so, if u want to keep the address of some value, u use pointer to point at this value, it means that the pointer value
		is the address u want to save (the address of the value)
	- the address is the index of the memory location in the memory matrix 

	- Stack :
		- stack is just a memory like all the rest (just a matric of story units)
		- stack is just a logical defintion, makes this piece of memory has a special treats
		- the first thing special in the stack that it stores daqta continuously 
		- each function creates its own stack frame [activaion record] (logical term), 
			stores its variable and once it does its functionality and pops out.
			and it takes the address of the first thing i write into it.
			it acts as the LIFO (Last in is the First out)

	- Heap :
		- Heap is just a memory like all the rest (just a matric of story units)
		- Heap is just a logical defintion, makes this piece of memory has a special treats
		- the first thing special in the Heap that it stores data Randomly (the expected behavior of the memory)
			wherever there's a space, store the data.
		- heap stores some things depends on the language
		- in c# (ref type objects) stored in the heap 
		- a anything stored in heap, its address in the heap will be stored in the stack 
		- if the address removed from stack, the object will be untracked and the Garbage collector in c# will remove it
*********************************************************************************
3 - Array
	- array has items all with same datatype
	- array could be stored in stack or heap 
	- array when intialized, it books a specific size in memory (length of array * size of the datatype of array)
		that's why it has a pre determined constant datatype
	- when intialized it stores the default value of the datatype in all its items 
	- I can access any item of it randomly, don't have to go through all pre items starting from first one
		to access the desired item.
	- array addres is the adress of the first item in the array.
	- address of any item in the array = (array base adress + (single value stores count * index))
	- array index starts from 0, zero based
	- array can't edit its length.
	- dynamic array can edit the array as it clone the array  into a new array with the new length.
	- regular array is a row of cells
	- Multi Dimentional array like 2d, 3d (pages)
	- 2d array declaration int32[] arr = new int32[rowsCount, colsCounr]
		size of the array is rowsCount * colsCount, access of the item with 2 indeces 
		placed in the memory as [0,0],[0,1],[0,2],[1,0], [1,1], [1,2] 
	- jagged array is an array of arrays 
		int32[][] arr = new int[3][]
		arr[0] = new int[3]
		arr[1] = new int[2]
		arr[2] = new int[4]
		difference of jagged array and 2d(multi-Dimentional) array is the jagged array could have difference col number in each row
		while the cols number in the 2d array is constant and pre-determined.
		in c++ when u decalre an array, the default is the array in the stack, if u want to place the array in heap and the address in the stack memory 
			u have to code this explicitly 
		in c# the visca verse 
		jagged array each item is an array so array, jagged array is stored in stack as refernece of items of arrays stored in heap.
		
	- Any Data structure has [infrastructure - operations]
		infrastructure: how data stored in memory (consecutive or non-consecutive)
		operations : what features it can offer to me when using it
	- Array
		infrastructure : consecutive data storage
		opeartions :
				get length
				static operations : doesn't change the infrastructure of the data structure (length and structure of it)
					travers => iterate in the items in the array (do whatever on each item)
					get at  => access by index
					set at  => access by index
				dynamic operations : changes the infrastructure of the data structure (length and structure of it)
					increasing length:
						insert at
						insert first
						insert last
					decreasing length:
						delete at
						delete first
						delete last
		- infrastructure is the compiler responsability
			c# asks compiler that asks the os that asks cpu to create an array with a size
		- operations is our responsability
			c# wraps the functionality with adds on in a helper class system.array
			.resize(int newsize)
			copy(to another array)
			clone(create a new array)
			getValue
			setValue
			binarysearch
			convertall(from type to another type)
			exists
			fill
			find
			findAll
			FindIndex
			FindLast
			FindLastIndex
			ForEach
			IndexOf
			LastIndexOf
			Reverse
			Sort
 *********************************************************************************
 4 - Linked List 
	- linked list is a series of nodes 
	- each node is an object carrying 2 props (data with any data type, pointer points to the next node)
	- there's a head node as the start of the node 
	- there's an iterator that iterates class
		conecpt : i need an iterator that i can place it in loop, so that it can iterate on the collection items
					it's implementation differ depending on the data strcture of the collection 
						in linkedList its functionality
								- get currentNode (whole Node [Data-NextPointer])
								- go Next
								- get Data only from the current Node
						and u can add what so ever, as it is a helper calss, u can modeify it upon ur needs
	Infrastructure : 
		Independent and NonConsecutive memory stores. (differ than array).
		can't access any node directly, have to start with the first and it leads me to the next 
		each node has more data than array, it stores the data and the pointer to the next node
	Operations : 
		sam opertaions of array, but different implementation
		get length
		
		traverse
		find

		dynamic operations : changes the infrastructure of the data structure (length and structure of it)
					increasing length:
						insert first
						insert after
						insert before
						insert last
					decreasing length:
						delete first
						delete last
						delete after
						delete before
 *********************************************************************************
5- Stack 
	- Stack is a first in last out 
	- can put data in one direction and read only top data 
	- there's a classiication of data structures : physical and logical data structures 
		 physical : Array and LinkedList
		 logical : rest of DataStructure
		 classification is done according to the infrastructure of the data structure
		 Array => consecutive memory store 
		 LinkedList => independent and non consecutive memory stores 
		 and these 2 modes are using the memory as it is
		 rest of data structures' infrastructure are composed of another data structures\
	- infrastructure : 
		- Array or linkedList
	- Operations :
		* Push
		* Pop
		* Peek
		* size
		* isEmpty
 *********************************************************************************
 6 - Queue
	- Queue is first in first out 
	- to enqueue and dequeue only 
	- infrastructure 
		Array or LinkedList 
	- Operations 
		enqueue
		dequeue
		peek
		size
		is empty
 *********************************************************************************
 7 - Key Value Pair && Dictionary 
	-  key value pair is a concept that can be a comonent of other data structures 
	- key and value pair is a unique pair 
	- key is unique and value belongs to one key
	- no more than key has the same value
	- class of key value pair , key is private set and get only, u may make the value the same
		and u may make it changable
	- Dictionary is a list of key value pairs + some restrictions 
		all keys are same type and all values are same types.
	- dictionary is open only from key side 
		u can directly access all keys, but u can't directly access values 
		u access values through keys.
	- no keys order restrictions by nature 
	- Dictionary Infrastructure: 
		Array or others (linkedList-tree)
	- Dictionary Operations:
		set
		get
		remove
		resize
		size
 *********************************************************************************
 8 - Hashing 
	- transfrom data to composed representation 
	- hashing is different than encryprion 
		encryption is two way transformation, u can encrypt data then decrypt it
		hashing is one way, u can only hash data, but u can't reform it to its original form 
	- there are hashing function => it takes data and function it
	- hash is the output value, usually it is a constant length
	- hash function is the function that hashes the values 
	- map is a one to one relationship
	- hashtable is a map between real data and hash data
	- hashing function (FNV-1a) is a 32 bit function
		it means its ouput is 32 bit length hash value
		Data : "This is Original Text"
		Hash function : FNV-1a
		hash : d60b93a5  hexa each 2 chars is 1 byte => 4 * 1 = 4 bytes = 32 bits 	
		hash is a case sensitive value 
	- there could be a collision
	- hashing is used in 
		save passwords in db
		database indexing
		domain name servers (DNSSEC)
		file fingerprints 
		......and more
 
 ****HashTables****
	- is a collection of key-value pairs (dictionary) with a twist.
	- the twist is :	
		in previous simple implemented dictionary i was looping for the keys when searching O(N)
		sweet spot is the searching for a key will be O(1)
		when inserting:
			in simple dictionary i was just inserting in the empty room
			in hashtable i am inserting in the right place according to hash value
			knowing the key => i can know the right place to insert and knowing the place from where i can retrieve
			first way is  hash = key % array.Length (high collision probability)
			second way is hash = (FNV-1a(key)) % array.Length 

	- #### 
		HashTable Core Operations : what makes a hashtabe a hashtable
		convert the key to array index 
		using % will make a collision, FNV-1a lowered its probability, but it will still happen, and it is like a protective way 
		collioson handling
		#####################        ######################
		##                 ##        ##                  ##
		## Converting Key  ##        ##     Collision    ##
		##  to array Index ##        ##      Handling    ## 
		##				   ##        ##                  ##
		#####################        ######################
		this is the Twist that hashtable does over  Dictionary 

	## Collision Hanldeing 
		if after hahsing the keys and found out that there are 2 kyes or more has the same hash value 
		in case of 2 
		there will be one empty index 
		there are 2 options to deal with this situation 
		1- Closed hashing (open addressing) => set this key in the empty index, but the index will
			not be a representation of the key hash.
			open addressing => open for any index in the hash table
			closed hashing => closed, don't leave the current hash table (don't use any different data structure)
			3 methods can implement this way (linear probing- quadratic probing - double hashing)
				linear probing 
					loop i = 1 to n-1 (n is the array length)
						new hash = (hash + i) % n
				quadratic probing (less steps than linear) 
					loop i = 1 to n-1 (n is the array length)
						new hash = (hash + i^2) % n
				double hashing 
					loop i = 1 to n-1 (n is the array length)
						new hash = (hash + hash2) % n
						hash2 = (hash +i) % n
		2- Open Hashing(Closed Addressing) 
			keep the relation between the hash value and the index
			the index will remain representable of the key hash value 
			but index (the value opposite to the key hash) will contain all the values opposite of the key 
			closed addressing => closed, don't change the index
			open hashing => open for use any other data structure in conjuction with the current hash table 
			there is one method implementing this way 
			Separate chaining 
				the value to the key will be a linkedList containing all mapped values.

	- Hash Table Implementation 
		- Infrastrure is Array (converting the hash value to array index)
		- operations :
			set 
			get 
			remove
			resize
			size 
 *********************************************************************************
 9 - Trees 
	- a conecpt that a data structure composed from it 
	- each item of tree is a node
	- a Node tree that has other nodes coming out from it 
	- File System is an example of trees 
	- Binary tree is a kind of trees, each node has 0 or 1 or 2 max nodes coming out from it
	- node has [data-pointer to left node - pointer to right node - pointer to parent node]
	- root node is the first node, u have to know it all the time 
	- connector between node(pointer) called edge 
	- bottom level of nodes (node that no nodes come out of it) called leaf.
	- tree has levels 0 basd 
	- any group of nodes in the tree called sub-tree.
	- height of the tree = number of levels of a tree.
	- depth of the node = level of the node
	-level 0 ,level 1, level 2, level 3 Tree
	- tree height = 4 
	- depth of node 5 in the level two = 2
	- Tree :
		- Infrastructure:
			just like the LinkedList infrastructure 
			independent Non-consecutive memory stores.
			may be same as array according to some refereneces but the more logical is it is more likely LinkedList.
		- Operations:
			inser
			find
			remove
			traversal
			height = number of levels

		- Traversal operations:
			not just looping, but there are some Techniques to do the traversal.
			1- Breadth First Traversal == Breadth first search in graph 
				use queue datastructure in the binary tree.
				Steps
					* add root node in a queue
					* while queue has data:
						- currentNode = queue.Dequeue
						- print data of the currentNode
						- if currentNode has left node then enqueue it
						- if currentNode has right node then enqueue it
		u'll get ur self in a loop that reads all binary tree data 
		of each level starting from 0 to height-1
		and in each level starting from left nodes and going to the right direction.

		- breadth first (means considering level), always use queue
		this is what gonna help u maintaing the level.
		
		- Breadth first Insertion (Level based insertion)
		- same logic of traversal => search for the first null node (level lower to highrt then left to right) to insert ur data in it
			- the node u iterate on and is not null, put it on the queue, to keep the sequenece of the breadth first.
			inputs : newNode 
			- if root is null
				root = newNode
				return
			- add root to a queue
			- while queue has a data 
				* currentNode = queue.Dequeue
				* if CurerentNode.left is null 
					- currentNode.left = newNode
						break
				* else 
					enqueue currentNode.left
				* if CurerentNode.right is null 
					- currentNode.right = newNode
						break
				* else 
					enqueu currentNode.right
		- Get Height (recursion)
		- PreOrder Traversal (Depth First traversal)
			get in depth first  (recursive)
			node=> left=> right
		- InOrder Traversal (Depth First traversal)
			get in depth first  (recursive)
			check left => print the node value => check right
			left => node => right
		- PostOrder Traversal (Depth First traversal)
			get in depth first  (recursive)
			check left => check right => print the node value 
			left => right => node

								A
					B						C
			   D		E		     F	 	    	G
												H		I		

	Traverlsal Breadth First = A => B => c => D => E => F => G => H => I
	Pre Order Depth first    = A => B => D => E => C => F => G => H => I
	In Order Depth first     = D => B => E => A => F => C => H => G => I
	Post Order Depth First   = D => E => B => F => H => I => G => C => A

	- Find(data) => use any traversal method
	-Delete(data) => 
		Concept : replace the node with the last node in the tree (the bottom-most and right-most) node of the tree
		- find the parent, left and right of the deired to delete node
		- find the last node
		 - make last node point to node childs
		- make node parent point to the last node
		- clear the pointer of the last node in its parent
		- make node = null

 *********************************************************************************
 10 - Binary Search tree 
	the most used tree, binary search tree is a binary tree that has a one charachtersitc:
		leftNode.Data < Parentnode.Data < rightNode.Data
		why : faster search 
		levels number <= items number 
		optimum levels number (log(N)) => (balanced binary search tree)
	* Duplication Handling 
		we have three methods to choose from 
		- Don't allow duplication
		- allow duplication, preferable (repeated item placed in a constant direction always right the original node or always left)
		- allow duplication, add property in the TreeNode class Called (Counter)
			and counter = 1 in the CTOR, and counter++; at duplication
		- dealing with tree is (iterative loops or recursion) do whatever suitable of both
		- Insert(data)  O(log n) optimum case (balanced)
			- if root is null
				* node = newNode(data)
				- return
			- CurrentNode = root;
			- while (currentNode is not null)
				if data < currentNode.data
					if currentNode.left is null
						currentNode.left = newNode(data)
						break;
					else 
						currentNode = currentNode.left
				else 
					if currentNode.right is null
						currentNode.right = newNode(data)
						break;
					else 
						currentNode = currentNode.right
		- Find(data)
		currentNode = root;
		while currentNode is not null
			if data = currentNode.data
				return currentNode
			else if data < currentNode
				currentNode = currentNode.left
			else if data > currentNode
				currentNode = currentNode.right
		return null // if node not exist

		- Find Node and Parent (done)


		- Delete 
			- node may be in three modes
					[
						1 - node is a leaf
							if node.left && node.right are null
							delete the node
							return

							SeudoCode
							{
								- find the node and its parent
								- if the nodeToDelete.left is null and nodeToDelete.right is null 

								- if the nodeToDelete is the left of its parent
									- parent.left = null
								- else
									- parent.right = null;
							}

					]
					[
						2 - node has one child
							if node.left XOR node.right is null
							replace the node by its child
							return

							SeudoCode
							{
								- find the node
								- if nodeToDelete.left is null xor nodeToDelete.right is null => has one child

								// replace the nodeToDelete by its child
								nodeToReplace = nodeToDelete.left or nodeToDelete.right
								nodeToDelete.left = nodeToReplace.left
								nodeToDelete.right = nodeToReplace.right
								nodeToDelete.data = nodeToReplace.data
								return
							}
					]

					[
						3 - node has two childs
							if node.left && node.right are not null
							replace the node by the smallest node in the right sub tree (the successive number in the InOrder Tree)
							(InOrder tree is the tree with the ascending order of the binary search tree)
							return

							Scratches 
							{
								- find the node
								- if the node.left and node.right are not null
								- find the smallest node in the right subtree and its parent
									(in other words, find the next node that comes after the node to delete in terms of data value)
								- move to right node
									- check if the node has left node (it must be smaller)
									- if left not null then
										- make parent equal currentrNode
										- make currentNode equal the left node of currentNode
											repeat 1 and 2 until left is null
								- assign the data of the smallest node to the node to delete.

								- if the node to delete is the parent of the smallest node
									just make the right of the node to delete is the right of the smallest node
									delete the node.

								- if the node to delete is not the parent of the smallest node
									then parent.left (smallest node) will be the smallest node.right (null)
									delete the node.

								- if the smallest node has right node
									make node.right = parent.left 
							}

							SuedoCode
							{
								Delete(node) Node has two childs
									- find the node
									- if nodeToDelete.left && nodeToDelete.Right are not null //case 3
									- currentNode = nodeToDelete.right //move to the right
									- parentOfSmallest = null
									while (currentNode.left is not null) //get smallest in the right sub tree
										- parentOfSmallest = currentNode
										- currentNode = currentNode.left
									- nodeToDelete.data = currentNode.data
									- if parentOfSmallest is null //parentOfSmallest == currentNode (nodeToDelete)
										- nodeToDelete.right = currentNode.right
									- else 
										- parentOfSmallest.left = currentNode.right	
									- delete smallestNode
							}
					]


		- Balanced BS tree
			balanced BS tree is sufficient in operations (Log N)more than linkedlist 
			- turn unbalanced tree into balanced BS tree
			- In Order traversal will list all nodes in a sorted way
				we can use it to save all nodes data sorted in array.

			- Calculate the mid index and make it the Root.
			- then recursvly divide the array into left and right,
				the recursive function will accept a part of the array and return subtree
				so, for each node:
					- divide the part of array into two parts
					- node.left will equal a new recursive call with left part of array
					- node.right will equal a new recursive call with right part of array 
			Suedo Code
			{
				Balance();
					nodes[]
					InOrderToArray(root, nodes)
					root = recursiveBalance(0,nodes.length - 1, nodes)

				InOrderToArray(node, nodes)
					if node == null return;
					InOrderToArray(node.left, nodes)
					nodes.add(node.data)
					InOrderToArray(node.right, nodes)

				recursiveBalance(start, end, nodes)
					if (start > end) return null;
					int mide = (start + end) / 2;
					create newNode
					newNode.data = nodes[mid];
					newNodeleft = recursiveBalance(start, mid - 1, nodes)
					newNodeRight = recursiveBalance(mide + 1, end, nodes)
					return newNode;
			}
 *********************************************************************************

11 -  Heap 
	Special type of Binary tree
		- there r 2 types of heap 
			1- Max heap : parent is greater than its children
				node > left , node > right 
			2- Min heap : parent is smaller than its children
				node < left , node < right 

			Max heap => left < parent > right
			Min heap => left > parent < right
			BS Tree  => left < parent < right
		
		- Complete Binary tree
			to step in a + 1 level, the level must be complete (each node has 2 children)


		- Can be represented by array , as it a completebinary tree.
											A
							B								C
					D				E				F				G
				H
				
				A	B	C	D	E	F	G	H
				0	1	2	3	4	5	6	7
				- number of total nodes (No of nodes starting from root to this level) = 2 ^ (no of level)
					at this nummber => start a new level 
				- for each node in (i) index, we can get its:
					Parent = array[(i - 1) / 2]
					left   = array[(2 * i) + 1]
					right  = array[(2 * i) + 2]
					so, u can store the heap tree in an array and save some memory.
					use this math represntation in read, write operations.

				- Breadth First traversal (level order)
					use the above equations 
					Steps :	
						- A is a root will added to [0]
						- B is left = [2 * 0 + 1] = [1]
						- C is right = [2 * 0 + 2 ] = [2]
						- D is left of B, and B in [1] = [2 * 1 + 1] = [3] ...etc 

		- Insert  min heap, by bercolating up - Bubbling Up  
			Scratches 
				[
					- ResizeOrNot();
					- i have an existing min heap and a node that i want to insert in the heap in the right place
						based on its value  considering being min heap (left > parent < right)
					- create a node with the value in the next available location (based on level order or breadth).
					- get the parent of the new node
					- compare the new value with the parent value
						if value is smaller 
							- swap parent and new node values 
							- repeat from step 2.
						else 
							- exit.

				]
				SeudoCode
				[
					- ResizeOrNot();
					i = size; // to maintain the data size in the array => count not capacity.
					size++
					array[i] = data;
					parent_index = (i - 1) / 2;
					while (i != 0 && array[i] < array[parent_index])
						- temp = array[i];
						- array[i] = array[parent_index]
						- array[parent_index] = temp;
						- i = parent_index;
						- parent_index = (i - 1) / 2;
					return;
				]
		- Insert  max heap 
			Scratches 
				[
					- ResizeOrNot();
					- i have an existing min heap and a node that i want to insert in the heap in the right place
						based on its value  considering being max heap (left < parent > right)
					- create a node with the value in the next available location (based on level order or breadth).
					- get the parent of the new node
					- compare the new value with the parent value
						if value is larger 
							- swap parent and new node values 
							- repeat from step 2.
						else 
							- exit.

				]
				SeudoCode
				[
					- ResizeOrNot();
					i = size; // to maintain the data size in the array => count not capacity.
					size++
					array[i] = data;
					parent_index = (i - 1) / 2;
					while (i != 0 && array[i] > array[parent_index])
						- temp = array[i];
						- array[i] = array[parent_index]
						- array[parent_index] = temp;
						- i = parent_index;
						- parent_index = (i - 1) / 2;
					return;
				]

		- Pop (min heap) Percolate Down
			- u can only delete the root node.

			Scratches 
			[
				- move the last node to be the root.
					then we will put it down in its correct place according to its value 
				- compare left and right child and get the smallest one
				- if the node value bigger then
					swap 
				- repeat untill there's no left child.
				- return the deleted node
			]
			SeudoCode 
			[
				Delete();
				- i = 0
				- data = array[i]
				- array[i] = array[size - 1]
				- array[size - 1] = null;
				- size--;
				- leftIndex = (2 * i) + 1;
				- while(leftIndex < size)
					- rightIndex = (2 * 1) + 2;
					- smallerIndex = leftIndex;
					- if (array[rightIndex] < array[leftIndex])
						- samllerIndex = rightIndex
					- if (array[smallerIndex] >= array[i])
						- break;

					- swap 
						- temp = array[smallerIndex]
						- array[smallerIndex] = temp
						- i = smallerIndex
						- leftIndex = (2 * i) + 1;
				- return data;
			]
